{"version":3,"sources":["components/input.tsx","components/SetComponent.tsx","components/button.tsx","HomePage.tsx","components/MainComponent.tsx","Counter1.tsx","Counter2.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["InputField","countValue","changeValue","type","style","width","value","onChange","SetComp","countMinValue","countMaxValue","onMouseDown","changeMinValue","blockColor","changeMaxValue","console","log","className","tabIndex","undefined","SetComponent","React","memo","Button","props","name","onClick","callback","disabled","HomePage","to","PATH","COUNTER1","changePath","MainComp","color","MainComponent","Count1","Counter1","Count2","incValue","resetValue","buttonDisabled","fontSize","setCounter2","Counter2","MAIN","SET","HOME","COUNTER2","App","initialPath","document","location","pathname","countStartMaxValue","Number","localStorage","getItem","countStartMinValue","useState","setButtonDisabled","setCountMinValue","setCountMaxValue","setCountValue","setBlockColor","path","setPath","useEffect","setItem","JSON","stringify","t","useCallback","e","eValue","currentTarget","c","p","setTimeout","element","blockButtonSet","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"+OAQaA,EAAa,SAAC,GAA+D,IAA9DC,EAA6D,EAA7DA,WAAYC,EAAiD,EAAjDA,YAAaC,EAAoC,EAApCA,KAAoC,mDAErF,OACI,uBACIC,MAAO,CAACC,MAAO,SACfC,MAAOL,EACPE,KAAMA,EACNI,SAAUL,KCHhBM,EAAU,SAAC,GAGsC,IAHrCC,EAGoC,EAHpCA,cAAeC,EAGqB,EAHrBA,cAAgBC,EAGK,EAHLA,YAChBC,EAEqB,EAFrBA,eAAgBC,EAEK,EAFLA,WAChBC,EACqB,EADrBA,eACqB,8GAElD,OADAC,QAAQC,IAAI,OAER,8BACI,sBAAKC,UAA8B,IAAlBR,GAAuBA,IAAkBC,EAC1CG,EAAa,WAD7B,UAEI,wBAAOF,YAAaA,EAAaO,SAAU,EAA3C,2BAEI,cAAC,EAAD,CAAYf,KAAM,SAAUF,WAAYQ,EAAeP,YAAaU,OAExE,wBAAOD,YAAaF,IAAkBC,EAAeC,OAAaQ,EAAWD,SAAU,EAAvF,2BAEI,cAAC,EAAD,CAAYf,KAAM,SAAUF,WAAYS,EAAeR,YAAaY,aAO3EM,EAAeC,IAAMC,KAAKd,GC3B1Be,EAAS,SAACC,GAInB,OACI,wBAAQP,UAA0B,SAAfO,EAAMC,KAAiB,aAAa,SAC/CC,QALW,WACnBF,EAAMG,YAKEC,SAAUJ,EAAMI,SAFxB,SAIKJ,EAAMC,QCRNI,EAAWR,IAAMC,MAAK,SAACE,GAMhC,OADAT,QAAQC,IAAI,QACJ,mCACA,sBAAKC,UAAU,MAAf,UACI,+DACA,gCACI,cAAC,IAAD,CAASa,GAAIC,EAAKC,SAAlB,SACI,sBAAMf,UAAW,OAAQS,QAT9B,WACfF,EAAMS,WAAWF,EAAKC,WAQF,0BAEJ,cAAC,IAAD,CAASF,GAAI,WAAb,SACI,sBAAMb,UAAW,OAAjB,qCCblBiB,EAAW,SAAC,GAAqD,IAApDjC,EAAmD,EAAnDA,WAAYS,EAAuC,EAAvCA,cAE3B,OADAK,QAAQC,IAAI,QACJ,8BAEA,qBAAKC,UAAW,aAAcb,MAAOH,IAAeS,EAAgB,CAACyB,MAAO,OAAS,CAACA,MAAO,IAA7F,SACKlC,OAQJmC,EAAgBf,IAAMC,KAAKY,GCnBlCG,EAAS,SAAC,GAAsD,IAArDpC,EAAoD,EAApDA,WAAYS,EAAwC,EAAxCA,cAEzB,OADAK,QAAQC,IAAI,UACJ,mCACA,cAACoB,EAAD,CAAenC,WAAYA,EACZS,cAAeA,OAM7B4B,EAAWjB,IAAMC,KAAKe,GCRtBE,EAAS,SAAC,GAYhB,IAXoBtC,EAWrB,EAXqBA,WAAYuC,EAWjC,EAXiCA,SACZC,EAUrB,EAVqBA,WAAY/B,EAUjC,EAViCA,cACZD,EASrB,EATqBA,cAAeI,EASpC,EAToCA,WAAYF,EAShD,EATgDA,YAC3BG,EAQrB,EARqBA,eAAgBF,EAQrC,EARqCA,eACbY,EAOxB,mJAEF,OADIT,QAAQC,IAAI,UACR,sBAAKC,UAAW,WAAhB,UAEA,uBAAMA,UAAW,OAAjB,UACI,8BACEO,EAAMkB,eAOF,cAACN,EAAD,CACenC,WAAYA,EACZS,cAAeA,IAR7B,sBAAKO,UAAW,cAAhB,yCACqB,gBAAfJ,GAAmD,IAAlBJ,GAAuBA,IAAkBC,EAErE,KADA,qBAAKN,MAAO,CAAC+B,MAAO,MAAOQ,SAAU,QAArC,kCAUjB,sBAAK1B,UAAW,cAAhB,UACG,cAAC,EAAD,CAAQQ,KAAM,MAAOE,SAAUa,EACvBZ,SAAU3B,IAAeS,IAAkBc,EAAMkB,iBACzD,cAAC,EAAD,CAAQjB,KAAM,QAASE,SAAUc,EACzBb,SAAU3B,IAAeQ,IAAkBe,EAAMkB,uBAGjE,uBAAMzB,UAAW,MAAjB,UACI,cAACG,EAAD,CACcX,cAAeA,EAAeC,cAAeA,EAC7CG,WAAYA,EAAYF,YAAaA,EACrCC,eAAgBA,EAAgBE,eAAgBA,IAC9D,qBAAKG,UAAW,cAAhB,SACA,cAAC,EAAD,CAAQQ,KAAM,MACNE,SAAUH,EAAMoB,YAChBhB,SAAUJ,EAAMkB,0BAQ3BG,EAAWxB,IAAMC,KAAKiB,GCzCtBR,EAAiB,CAC1Be,KAAM,OACNC,IAAK,OACLC,KAAM,IACNhB,SAAU,YACViB,SAAU,aAgJCC,MA7If,WACI,IAAIC,EAA6BC,SAASC,SAASC,SAC/CC,EAAqBC,OAAOC,aAAaC,QAAQ,kBACjDC,EAAqBH,OAAOC,aAAaC,QAAQ,kBAH1C,EAIiCE,oBAAS,GAJ1C,mBAIJlB,EAJI,KAIYmB,EAJZ,OAK+BD,mBAAiBD,GALhD,mBAKJlD,EALI,KAKWqD,EALX,OAM+BF,mBAAiBL,GANhD,mBAMJ7C,EANI,KAMWqD,EANX,OAOyBH,mBAAiBnD,GAP1C,mBAOJR,EAPI,KAOQ+D,EAPR,OAQyBJ,mBAAS,YARlC,mBAQJ/C,EARI,KAQQoD,EARR,OASaL,mBAAST,GATtB,mBASJe,EATI,KASEC,EATF,KAUXC,qBAAU,WACFF,GACAT,aAAaY,QAAQ,OAAQH,KAElC,CAACA,IACJE,qBAAU,WACNX,aAAaY,QAAQ,gBAAiBC,KAAKC,UAAU9D,MACtD,CAACA,IAEJ2D,qBAAU,WACNX,aAAaY,QAAQ,gBAAiBC,KAAKC,UAAU7D,MACtD,CAACA,IACJ0D,qBAAU,WACNX,aAAaY,QAAQ,aAAcC,KAAKC,UAAUtE,MACnD,CAACA,IACJ,IA2C8BuE,EAvCxB5D,EAAiB6D,uBAAY,SAACC,GAChCb,GAAkB,GAClB,IAAIc,EAASnB,OAAOkB,EAAEE,cAActE,OACpC,GAAIqE,GAAU,EAAG,CACb,GAAIjE,EAAgBiE,EAChB,OAEAb,EAAiBa,MAG1B,CAAClE,EAAeC,EAAegC,IAC5B5B,EAAiB2D,uBAAY,SAACC,GAChCb,GAAkB,GAClB,IAAIc,EAASnB,OAAOkB,EAAEE,cAActE,OAChCqE,GAAUlE,GACVsD,EAAiBY,GAEjBA,EAASlE,GACTsD,EAAiBP,OAAOC,aAAaC,QAAQ,qBAElD,CAACjD,EAAeC,EAAegC,IAC5BF,EAAW,WACbwB,GAAc,SAAAa,GAAC,OAAIA,EAAI,MAIrBpC,EAAagC,uBAAY,WAC3BT,EAAcvD,KACf,CAACR,IACEgC,EAAa,SAAC6C,GAChBd,EAAcvD,GAEd0D,EADaW,IAGXnE,EAAmD8D,uBAAY,WACjER,EAAc,eACdc,YAAW,kBAAMd,EAAc,cAAa,OAC7C,CAACpD,IAuBJ,OACI,cAAC,IAAD,UAEI,qBAAKI,UAAU,MAAf,SACI,yBAAQA,UAAU,aAAlB,UACI,eAAC,IAAD,WAEI,cAAC,IAAD,CAAOiD,KAAMnC,EAAKC,SAAUgD,QAAS,cAAC1C,EAAD,CAAUrC,WAAYA,EACZS,cAAeA,MAK9D,cAAC,IAAD,CAAOwD,KAAMnC,EAAKkB,SAAU+B,QAAS,cAACnC,EAAD,CAAUJ,WAAYA,EACZxC,WAAYA,EACZS,cAAeA,EACf8B,SAAUA,EACV/B,cAAeA,EACfI,WAAYA,EACZF,YAAaA,EACbC,eAAgBA,EAChBE,eAAgBA,EAChB8B,YAtF/C,WAChBiB,GAAmBnB,GACnBsB,EAAcvD,IAqFiDiC,eAAgBA,MAM/D,cAAC,IAAD,CAAOwB,KAAMnC,EAAKgB,IAAKiC,QAAS,cAAC5D,EAAD,CAAcX,cAAeA,EACfC,cAAeA,EACfG,WAAYA,EACZF,YAAaA,EACbC,eAAgBA,EAChBE,eAAgBA,MAE9D,cAAC,IAAD,CAAOoD,KAAMnC,EAAKiB,KAAMgC,QAAS,cAACnD,EAAD,CAAUI,WAAYA,SAE1DiC,IAASnC,EAAKC,WA3DDwC,EA2DkCzC,EAAKgB,IAzD7D,sBAAK9B,UAAW,cAAhB,UACI,cAAC,EAAD,CAAQQ,KAAM,MAAOE,SAAUa,EAAUZ,SAAU3B,IAAeS,IAClE,cAAC,EAAD,CAAQe,KAAM,QAASE,SAAUc,EAAYb,SAAU3B,IAAeQ,IACtE,cAAC,IAAD,CAASqB,GAAI,MAAb,SACI,cAAC,EAAD,CAAQL,KAAM,MAAOE,SAAU,kBAAMM,EAAWuC,IAAI5C,UAAU,UAsD7DsC,IAASnC,EAAKgB,KAjDR,SAACyB,GACpB,OACI,qBAAKvD,UAAW,cAAhB,SACI,cAAC,IAAD,CAASa,GAAI,WAAb,SACI,cAAC,EAAD,CAAQL,KAAM,MAAOE,SAAU,kBAAMM,EAAWuC,IAAI5C,UAAU,QA6CxCqD,CAAelD,EAAKC,UACzCkC,IAASnC,EAAKiB,MAAQ,KACvB,cAAC,IAAD,CAASlB,GAAIC,EAAKiB,KAAlB,SACI,cAAC,EAAD,CAAQvB,KAAM,OAAQE,SAAU,kBAAMM,EAAWF,EAAKiB,OAAOpB,UAAU,cC/IhFsD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACL,cAAC,IAAMC,WAAP,UAEI,cAAC,EAAD,MAEJzC,SAAS0C,eAAe,SAM5BZ,M","file":"static/js/main.58398fe6.chunk.js","sourcesContent":["import React, {ChangeEvent} from \"react\";\r\n\r\ntype InputPropsType = {\r\n    countValue: number|undefined\r\n    changeValue: (event: ChangeEvent<HTMLInputElement>) => void\r\n    type:string\r\n}\r\n\r\nexport const InputField = ({countValue, changeValue, type, ...props}: InputPropsType) => {\r\n\r\n    return (\r\n        <input\r\n            style={{width: '130px'}}\r\n            value={countValue}\r\n            type={type}\r\n            onChange={changeValue}\r\n        />\r\n\r\n    )\r\n\r\n}","import React, {ChangeEvent, MouseEventHandler} from 'react'\r\nimport {InputField} from \"./input\";\r\n\r\nexport type PropsSetComponent = {\r\n    countMinValue: number\r\n    countMaxValue: number\r\n    blockColor: string\r\n    onMouseDown: MouseEventHandler<HTMLLabelElement>\r\n    changeMinValue: (event: ChangeEvent<HTMLInputElement>) => void\r\n    changeMaxValue: (event: ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nconst SetComp = ({countMinValue, countMaxValue,  onMouseDown,\r\n                                 changeMinValue, blockColor,\r\n                                 changeMaxValue, ...props\r\n                             }: PropsSetComponent) => {\r\n    console.log('Set')\r\n    return (\r\n        <div>\r\n            <div className={ countMinValue === 0 || countMinValue === countMaxValue\r\n                          ? blockColor : 'setBlock'}>\r\n                <label onMouseDown={onMouseDown} tabIndex={0}>\r\n                    set min value:\r\n                    <InputField type={'number'} countValue={countMinValue} changeValue={changeMinValue}/>\r\n                </label>\r\n                <label onMouseDown={countMinValue === countMaxValue? onMouseDown: undefined} tabIndex={0} >\r\n                   set max value:\r\n                    <InputField type={'number'} countValue={countMaxValue} changeValue={changeMaxValue}/>\r\n                </label>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport const SetComponent = React.memo(SetComp)\r\n\r\n","import React from \"react\";\r\n\r\ntype TypeButtonProps = {\r\n    name: string\r\n    callback: () => void\r\n    disabled: boolean\r\n}\r\nexport const Button = (props: TypeButtonProps) => {\r\n    const onClickHandler = () => {\r\n        props.callback()\r\n    }\r\n    return (\r\n        <button className={props.name === 'HOME'? 'buttonHome':'button'}\r\n                onClick={onClickHandler}\r\n                disabled={props.disabled}>\r\n\r\n            {props.name}\r\n        </button>\r\n    )\r\n}","import React from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"./App\";\r\n\r\ntype PropsHomePage = {\r\n    changePath:(p:string)=>void\r\n}\r\n\r\nexport const HomePage = React.memo((props:PropsHomePage) => {\r\n\r\nconst changePath = () =>{\r\n    props.changePath(PATH.COUNTER1)\r\n}\r\n    console.log('home')\r\n    return (<>\r\n            <div className=\"App\">\r\n                <h1> CHOOSE A VARIANT OF COUNTER </h1>\r\n                <div>\r\n                    <NavLink to={PATH.COUNTER1}>\r\n                        <span className={'link'} onClick={changePath}>COUNTER 1 </span>\r\n                    </NavLink>\r\n                    <NavLink to={'counter2'}>\r\n                        <span className={'link'}> COUNTER 2</span>\r\n                    </NavLink>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n})\r\n","import React from 'react';\r\n\r\n\r\n\r\nexport type PropsMainComponent = {\r\n    countValue: number\r\n    countMaxValue:number\r\n}\r\n\r\nconst MainComp = ({countValue, countMaxValue}: PropsMainComponent) => {\r\n    console.log('Main')\r\n    return (<div>\r\n\r\n            <div className={'countBlock'} style={countValue === countMaxValue ? {color: 'red'} : {color: ''}}>\r\n                {countValue}\r\n\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\nexport const MainComponent = React.memo(MainComp)","import React from 'react';\r\nimport {MainComponent, PropsMainComponent} from \"./components/MainComponent\";\r\n\r\nconst Count1 = ({countValue, countMaxValue}: PropsMainComponent ) => {\r\n    console.log('Count1')\r\n    return (<>\r\n            <MainComponent countValue={countValue}\r\n                           countMaxValue={countMaxValue}\r\n                           />\r\n        </>\r\n\r\n    )\r\n}\r\nexport const Counter1 = React.memo(Count1)","import React from 'react';\r\nimport {MainComponent, PropsMainComponent} from \"./components/MainComponent\";\r\nimport {PropsSetComponent, SetComponent} from \"./components/SetComponent\";\r\nimport {Button} from \"./components/button\";\r\n\r\nexport const Count2 = ({\r\n                           countValue, incValue,\r\n                           resetValue, countMaxValue,\r\n                           countMinValue, blockColor, onMouseDown,\r\n                           changeMaxValue, changeMinValue,\r\n                           ...props\r\n                       }: PropsMainComponent & PropsSetComponent & {\r\n    setCounter2: () => void\r\n    buttonDisabled: boolean\r\n    incValue:() => void\r\n    resetValue:() => void\r\n\r\n}) => {\r\n        console.log('Count2')\r\n    return (<div className={'counter2'}>\r\n\r\n            <span className={'main'}>\r\n                <div>\r\n                {!props.buttonDisabled\r\n                    ? (<div className={'countBlock2'}> Enter value and press 'SET'\r\n                            {blockColor === 'setBlockRed' && (countMinValue === 0 || countMinValue === countMaxValue)\r\n                                ? <div style={{color: 'red', fontSize: '20px'}}>Incorrect value</div>\r\n                                : null}\r\n                        </div>\r\n                    )\r\n                    : <MainComponent\r\n                                     countValue={countValue}\r\n                                     countMaxValue={countMaxValue}\r\n                                                                   />}\r\n                    </div>\r\n\r\n                 <div className={'buttonBlock'}>\r\n                    <Button name={'inc'} callback={incValue}\r\n                            disabled={countValue === countMaxValue || !props.buttonDisabled}/>\r\n                    <Button name={'reset'} callback={resetValue}\r\n                            disabled={countValue === countMinValue || !props.buttonDisabled}/>\r\n                 </div>\r\n            </span>\r\n            <span className={'set'}>\r\n                <SetComponent //resetValue={resetValue}\r\n                              countMinValue={countMinValue} countMaxValue={countMaxValue}\r\n                              blockColor={blockColor} onMouseDown={onMouseDown}\r\n                              changeMinValue={changeMinValue} changeMaxValue={changeMaxValue}/>\r\n                <div className={'buttonBlock'}>\r\n                <Button name={'SET'}\r\n                        callback={props.setCounter2}\r\n                        disabled={props.buttonDisabled}/>\r\n                </div>\r\n            </span>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\nexport const Counter2 = React.memo(Count2)","import React, {ChangeEvent, MouseEventHandler, useCallback, useEffect, useMemo, useState} from 'react';\nimport './App.css';\nimport {BrowserRouter, NavLink, Route, Routes} from \"react-router-dom\";\nimport {SetComponent} from \"./components/SetComponent\";\nimport {Button} from \"./components/button\";\nimport {HomePage} from \"./HomePage\";\nimport {Counter1} from \"./Counter1\";\nimport {Counter2} from \"./Counter2\";\n\n\nexport type TypePath = {\n    MAIN: string\n    SET: string\n    HOME: string\n    COUNTER1: string\n    COUNTER2: string\n}\n\nexport const PATH: TypePath = {\n    MAIN: 'main',\n    SET: '/set',\n    HOME: '/',\n    COUNTER1: '/counter1',\n    COUNTER2: '/counter2'\n}\n\nfunction App() {\n    let initialPath: string | null = document.location.pathname\n    let countStartMaxValue = Number(localStorage.getItem('countMaxValue'))\n    let countStartMinValue = Number(localStorage.getItem('countMinValue'))\n    const [buttonDisabled, setButtonDisabled] = useState(false)\n    const [countMinValue, setCountMinValue] = useState<number>(countStartMinValue)\n    const [countMaxValue, setCountMaxValue] = useState<number>(countStartMaxValue)\n    const [countValue, setCountValue] = useState<number>(countMinValue)\n    const [blockColor, setBlockColor] = useState('setBlock')\n    const [path, setPath] = useState(initialPath)\n    useEffect(() => {\n        if (path) {\n            localStorage.setItem('path', path)\n        }\n    }, [path])\n    useEffect(() => {\n        localStorage.setItem('countMinValue', JSON.stringify(countMinValue))\n    }, [countMinValue])\n\n    useEffect(() => {\n        localStorage.setItem('countMaxValue', JSON.stringify(countMaxValue))\n    }, [countMaxValue])\n    useEffect(() => {\n        localStorage.setItem('countValue', JSON.stringify(countValue))\n    }, [countValue])\n    const setCounter2 = () => {\n        setButtonDisabled(!buttonDisabled)\n        setCountValue(countMinValue)\n    }\n    const changeMinValue = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        setButtonDisabled(false)\n        let eValue = Number(e.currentTarget.value)\n        if (eValue >= 0) {\n            if (countMaxValue < eValue) {\n                return\n            } else {\n                setCountMinValue(eValue)\n            }\n        }\n    }, [countMinValue, countMaxValue, buttonDisabled])\n    const changeMaxValue = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        setButtonDisabled(false)\n        let eValue = Number(e.currentTarget.value)\n        if (eValue >= countMinValue) {\n            setCountMaxValue(eValue)\n        }\n        if (eValue < countMinValue) {\n            setCountMaxValue(Number(localStorage.getItem('countMinValue')))\n        }\n    }, [countMinValue, countMaxValue, buttonDisabled])\n    const incValue = () => {\n        setCountValue(c => c + 1)\n\n    }\n\n    const resetValue = useCallback(() => {\n        setCountValue(countMinValue)\n    }, [countValue])\n    const changePath = (p: string) => {\n        setCountValue(countMinValue)\n        const path = p\n        setPath(path)\n    }\n    const onMouseDown: MouseEventHandler<HTMLLabelElement> = useCallback(() => {\n        setBlockColor('setBlockRed')\n        setTimeout(() => setBlockColor('setBlock'), 1000)\n    }, [blockColor])\n\n    const blockButtonsIncReset = (t: string) => {\n        return (\n            <div className={'buttonBlock'}>\n                <Button name={'inc'} callback={incValue} disabled={countValue === countMaxValue}/>\n                <Button name={'reset'} callback={resetValue} disabled={countValue === countMinValue}/>\n                <NavLink to={'set'}>\n                    <Button name={'set'} callback={() => changePath(t)} disabled={false}/>\n                </NavLink>\n\n            </div>)\n    }\n    const blockButtonSet = (t: string) => {\n        return (\n            <div className={'buttonBlock'}>\n                <NavLink to={'counter1'}>\n                    <Button name={'set'} callback={() => changePath(t)} disabled={false}/>\n                </NavLink>\n\n            </div>)\n    }\n\n    return (\n        <BrowserRouter>\n\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <Routes>\n\n                        <Route path={PATH.COUNTER1} element={<Counter1 countValue={countValue}\n                                                                       countMaxValue={countMaxValue}\n                        />}\n\n                        />\n\n                        <Route path={PATH.COUNTER2} element={<Counter2 resetValue={resetValue}\n                                                                       countValue={countValue}\n                                                                       countMaxValue={countMaxValue}\n                                                                       incValue={incValue}\n                                                                       countMinValue={countMinValue}\n                                                                       blockColor={blockColor}\n                                                                       onMouseDown={onMouseDown}\n                                                                       changeMinValue={changeMinValue}\n                                                                       changeMaxValue={changeMaxValue}\n                                                                       setCounter2={setCounter2}\n                                                                       buttonDisabled={buttonDisabled}\n\n\n                        />}\n                        />\n\n                        <Route path={PATH.SET} element={<SetComponent countMinValue={countMinValue}\n                                                                      countMaxValue={countMaxValue}\n                                                                      blockColor={blockColor}\n                                                                      onMouseDown={onMouseDown}\n                                                                      changeMinValue={changeMinValue}\n                                                                      changeMaxValue={changeMaxValue}\n                        />}/>\n                        <Route path={PATH.HOME} element={<HomePage changePath={changePath}/>}/>\n                    </Routes>\n                    {path === PATH.COUNTER1 && blockButtonsIncReset(PATH.SET)}\n                    {path === PATH.SET && blockButtonSet(PATH.COUNTER1)}\n                    {path === PATH.HOME && null}\n                    <NavLink to={PATH.HOME}>\n                        <Button name={'HOME'} callback={() => changePath(PATH.HOME)} disabled={false}/>\n                    </NavLink>\n                </header>\n\n            </div>\n\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n    <React.StrictMode>\n\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}