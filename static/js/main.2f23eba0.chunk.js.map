{"version":3,"sources":["components/input.tsx","components/SetComponent.tsx","components/button.tsx","HomePage.tsx","components/MainComponent.tsx","Counter1.tsx","Counter2.tsx","redux/reducer.ts","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["InputField","countValue","changeValue","type","style","width","value","onChange","SetComp","countMinValue","countMaxValue","onMouseDown","changeMinValue","blockColor","changeMaxValue","console","log","className","tabIndex","undefined","SetComponent","React","memo","Button","props","name","onClick","callback","disabled","HomePage","to","PATH","COUNTER1","changePath","MainComp","color","MainComponent","Count1","Counter1","Count2","incValue","resetValue","buttonDisabled","fontSize","setCounter2","Counter2","InitialState","Number","localStorage","getItem","path","document","location","pathname","setButtonDisabledAC","setCountMaxValueAC","setCountValueAC","setBlockColorAC","MAIN","SET","HOME","COUNTER2","App","dispatch","useDispatch","useSelector","state","count","useEffect","setItem","JSON","stringify","t","useCallback","e","eValue","currentTarget","setCountMinValueAC","p","setPathAC","setTimeout","element","blockButtonSet","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","window","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2f23eba0.chunk.js","sourcesContent":["import React, {ChangeEvent} from \"react\";\r\n\r\ntype InputPropsType = {\r\n    countValue: number|undefined\r\n    changeValue: (event: ChangeEvent<HTMLInputElement>) => void\r\n    type:string\r\n}\r\n\r\nexport const InputField = ({countValue, changeValue, type, ...props}: InputPropsType) => {\r\n\r\n    return (\r\n        <input\r\n            style={{width: '130px'}}\r\n            value={countValue}\r\n            type={type}\r\n            onChange={changeValue}\r\n        />\r\n\r\n    )\r\n\r\n}","import React, {ChangeEvent, MouseEventHandler} from 'react'\r\nimport {InputField} from \"./input\";\r\n\r\nexport type PropsSetComponent = {\r\n    countMinValue: number\r\n    countMaxValue: number\r\n    blockColor: string\r\n    onMouseDown: MouseEventHandler<HTMLLabelElement>\r\n    changeMinValue: (event: ChangeEvent<HTMLInputElement>) => void\r\n    changeMaxValue: (event: ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nconst SetComp = ({countMinValue, countMaxValue,  onMouseDown,\r\n                                 changeMinValue, blockColor,\r\n                                 changeMaxValue, ...props\r\n                             }: PropsSetComponent) => {\r\n    console.log('Set')\r\n    return (\r\n        <div>\r\n            <div className={ countMinValue === 0 || countMinValue === countMaxValue\r\n                          ? blockColor : 'setBlock'}>\r\n                <label onMouseDown={onMouseDown} tabIndex={0}>\r\n                    set min value:\r\n                    <InputField type={'number'} countValue={countMinValue} changeValue={changeMinValue}/>\r\n                </label>\r\n                <label onMouseDown={countMinValue === countMaxValue? onMouseDown: undefined} tabIndex={0} >\r\n                   set max value:\r\n                    <InputField type={'number'} countValue={countMaxValue} changeValue={changeMaxValue}/>\r\n                </label>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport const SetComponent = React.memo(SetComp)\r\n\r\n","import React from \"react\";\r\n\r\ntype TypeButtonProps = {\r\n    name: string\r\n    callback: () => void\r\n    disabled: boolean\r\n}\r\nexport const Button = (props: TypeButtonProps) => {\r\n    const onClickHandler = () => {\r\n        props.callback()\r\n    }\r\n    return (\r\n        <button className={props.name === 'HOME'? 'buttonHome':'button'}\r\n                onClick={onClickHandler}\r\n                disabled={props.disabled}>\r\n\r\n            {props.name}\r\n        </button>\r\n    )\r\n}","import React from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"./App\";\r\n\r\ntype PropsHomePage = {\r\n    changePath:(p:string)=>void\r\n}\r\n\r\nexport const HomePage = React.memo((props:PropsHomePage) => {\r\n\r\nconst changePath = () =>{\r\n    props.changePath(PATH.COUNTER1)\r\n}\r\n    console.log('home')\r\n    return (<>\r\n            <div className=\"App\">\r\n                <h1> CHOOSE A VARIANT OF COUNTER </h1>\r\n                <div>\r\n                    <NavLink to={PATH.COUNTER1}>\r\n                        <span className={'link'} onClick={changePath}>COUNTER 1 </span>\r\n                    </NavLink>\r\n                    <NavLink to={'counter2'}>\r\n                        <span className={'link'}> COUNTER 2</span>\r\n                    </NavLink>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n})\r\n","import React from 'react';\r\n\r\n\r\n\r\nexport type PropsMainComponent = {\r\n    countValue: number\r\n    countMaxValue:number\r\n}\r\n\r\nconst MainComp = ({countValue, countMaxValue}: PropsMainComponent) => {\r\n    console.log('Main')\r\n    return (<div>\r\n\r\n            <div className={'countBlock'} style={countValue === countMaxValue ? {color: 'red'} : {color: ''}}>\r\n                {countValue}\r\n\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\nexport const MainComponent = React.memo(MainComp)","import React from 'react';\r\nimport {MainComponent, PropsMainComponent} from \"./components/MainComponent\";\r\n\r\nconst Count1 = ({countValue, countMaxValue}: PropsMainComponent ) => {\r\n    console.log('Count1')\r\n    return (<>\r\n            <MainComponent countValue={countValue}\r\n                           countMaxValue={countMaxValue}\r\n                           />\r\n        </>\r\n\r\n    )\r\n}\r\nexport const Counter1 = React.memo(Count1)","import React from 'react';\r\nimport {MainComponent, PropsMainComponent} from \"./components/MainComponent\";\r\nimport {PropsSetComponent, SetComponent} from \"./components/SetComponent\";\r\nimport {Button} from \"./components/button\";\r\n\r\nexport const Count2 = ({\r\n                           countValue, incValue,\r\n                           resetValue, countMaxValue,\r\n                           countMinValue, blockColor, onMouseDown,\r\n                           changeMaxValue, changeMinValue,\r\n                           ...props\r\n                       }: PropsMainComponent & PropsSetComponent & {\r\n    setCounter2: () => void\r\n    buttonDisabled: boolean\r\n    incValue:() => void\r\n    resetValue:() => void\r\n\r\n}) => {\r\n        console.log('Count2')\r\n    return (<div className={'counter2'}>\r\n\r\n            <span className={'main'}>\r\n                <div>\r\n                {!props.buttonDisabled\r\n                    ? (<div className={'countBlock2'}> Enter value and press 'SET'\r\n                            {blockColor === 'setBlockRed' && (countMinValue === 0 || countMinValue === countMaxValue)\r\n                                ? <div style={{color: 'red', fontSize: '20px'}}>Incorrect value</div>\r\n                                : null}\r\n                        </div>\r\n                    )\r\n                    : <MainComponent\r\n                                     countValue={countValue}\r\n                                     countMaxValue={countMaxValue}\r\n                                                                   />}\r\n                    </div>\r\n\r\n                 <div className={'buttonBlock'}>\r\n                    <Button name={'inc'} callback={incValue}\r\n                            disabled={countValue === countMaxValue || !props.buttonDisabled}/>\r\n                    <Button name={'reset'} callback={resetValue}\r\n                            disabled={countValue === countMinValue || !props.buttonDisabled}/>\r\n                 </div>\r\n            </span>\r\n            <span className={'set'}>\r\n                <SetComponent //resetValue={resetValue}\r\n                              countMinValue={countMinValue} countMaxValue={countMaxValue}\r\n                              blockColor={blockColor} onMouseDown={onMouseDown}\r\n                              changeMinValue={changeMinValue} changeMaxValue={changeMaxValue}/>\r\n                <div className={'buttonBlock'}>\r\n                <Button name={'SET'}\r\n                        callback={props.setCounter2}\r\n                        disabled={props.buttonDisabled}/>\r\n                </div>\r\n            </span>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\nexport const Counter2 = React.memo(Count2)","type TypeInitialState = {\r\n    buttonDisabled: boolean\r\n    countMinValue: number\r\n    countMaxValue: number\r\n    countValue: number\r\n    blockColor: string\r\n    path: string | null\r\n}\r\ntype TypeSetButtonDisabledAC = {\r\n    type: \"SET_BUTTON_DISABLED\"\r\n    buttonDisabled: boolean\r\n}\r\ntype TypeSetCountMinValueAC = {\r\n    type: \"SET_COUNT_MIN_VALUE\"\r\n    countMinValue: number\r\n}\r\ntype TypeSetCountMaxValueAC = {\r\n    type: \"SET_COUNT_MAX_VALUE\"\r\n    countMaxValue: number\r\n}\r\ntype TypeSetCountValueAC = {\r\n    type: \"SET_COUNT_VALUE\"\r\n    countValue: number\r\n}\r\ntype TypeSetBlockColorAC = {\r\n    type: \"SET_BLOCK_COLOR\"\r\n    blockColor: string\r\n}\r\ntype TypeSetPathAC = {\r\n    type: \"SET_PATH\"\r\n    path: string | null\r\n}\r\n\r\ntype TypeAllAction = TypeSetButtonDisabledAC | TypeSetCountMinValueAC\r\n    | TypeSetCountMaxValueAC | TypeSetCountValueAC | TypeSetBlockColorAC | TypeSetPathAC\r\nconst InitialState: TypeInitialState = {\r\n    buttonDisabled: false,\r\n    countMinValue: Number(localStorage.getItem('countMinValue')),\r\n    countMaxValue: Number(localStorage.getItem('countMaxValue')),\r\n    countValue: Number(localStorage.getItem('countMinValue')),\r\n    blockColor: 'setBlock',\r\n    path: document.location.pathname\r\n}\r\n\r\n\r\nexport const countReducer = (state: TypeInitialState = InitialState, action: TypeAllAction) => {\r\n    switch (action.type) {\r\n        case \"SET_BUTTON_DISABLED\":\r\n            return {...state, buttonDisabled: action.buttonDisabled}\r\n        case \"SET_COUNT_MIN_VALUE\":\r\n            return {...state, countMinValue: action.countMinValue}\r\n        case \"SET_COUNT_MAX_VALUE\":\r\n            return {...state, countMaxValue: action.countMaxValue}\r\n        case \"SET_COUNT_VALUE\":\r\n            return {...state, countValue: action.countValue}\r\n        case \"SET_BLOCK_COLOR\":\r\n            return {...state, blockColor: action.blockColor}\r\n        case \"SET_PATH\":\r\n            return {...state, path: action.path}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setButtonDisabledAC = (value: boolean) => {\r\n    return {\r\n        type: \"SET_BUTTON_DISABLED\",\r\n        buttonDisabled: value,\r\n    }\r\n}\r\nexport const setCountMinValueAC = (countMinValue: number) => {\r\n    return {\r\n        type: \"SET_COUNT_MIN_VALUE\",\r\n        countMinValue,\r\n    }\r\n}\r\nexport const setCountMaxValueAC = (countMaxValue: number) => {\r\n    return {\r\n        type: \"SET_COUNT_MAX_VALUE\",\r\n        countMaxValue,\r\n    }\r\n}\r\nexport const setCountValueAC = (countValue: number) => {\r\n    return {\r\n        type: \"SET_COUNT_VALUE\",\r\n        countValue,\r\n    }\r\n}\r\nexport const setBlockColorAC = (blockColor: string) => {\r\n    return {\r\n        type: \"SET_BLOCK_COLOR\",\r\n        blockColor,\r\n    }\r\n}\r\nexport const setPathAC = (path: string | null) => {\r\n    return {\r\n        type: \"SET_PATH\",\r\n        path,\r\n    }\r\n}","import React, {ChangeEvent, MouseEventHandler, useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {BrowserRouter, NavLink, Route, Routes} from \"react-router-dom\";\r\nimport {SetComponent} from \"./components/SetComponent\";\r\nimport {Button} from \"./components/button\";\r\nimport {HomePage} from \"./HomePage\";\r\nimport {Counter1} from \"./Counter1\";\r\nimport {Counter2} from \"./Counter2\";\r\nimport {\r\n    setBlockColorAC,\r\n    setButtonDisabledAC,\r\n    setCountMaxValueAC,\r\n    setCountMinValueAC,\r\n    setCountValueAC,\r\n    setPathAC\r\n} from './redux/reducer'\r\nimport {AppRootStateType} from './redux/store'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\n\r\nexport type TypePath = {\r\n    MAIN: string\r\n    SET: string\r\n    HOME: string\r\n    COUNTER1: string\r\n    COUNTER2: string\r\n}\r\n\r\nexport const PATH: TypePath = {\r\n    MAIN: 'main',\r\n    SET: '/set',\r\n    HOME: '/',\r\n    COUNTER1: '/counter1',\r\n    COUNTER2: '/counter2'\r\n}\r\n\r\nfunction App() {\r\n    const dispatch = useDispatch()\r\n    const buttonDisabled = useSelector<AppRootStateType, boolean>(state => state.count.buttonDisabled)\r\n    const countMinValue = useSelector<AppRootStateType, number>(state => state.count.countMinValue)\r\n    const countMaxValue = useSelector<AppRootStateType, number>(state => state.count.countMaxValue)\r\n    const countValue = useSelector<AppRootStateType, number>(state => state.count.countValue)\r\n    const blockColor = useSelector<AppRootStateType, string>(state => state.count.blockColor)\r\n    const path = useSelector<AppRootStateType, string|null>(state => state.count.path)\r\n\r\n\r\n    useEffect(() => {\r\n        if (path) {\r\n            localStorage.setItem('path', path)\r\n        }\r\n    }, [path])\r\n    useEffect(() => {\r\n        localStorage.setItem('countMinValue', JSON.stringify(countMinValue))\r\n    }, [countMinValue])\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('countMaxValue', JSON.stringify(countMaxValue))\r\n    }, [countMaxValue])\r\n    useEffect(() => {\r\n        localStorage.setItem('countValue', JSON.stringify(countValue))\r\n    }, [countValue])\r\n    const setCounter2 = () => {\r\n        dispatch(setButtonDisabledAC(!buttonDisabled))\r\n        dispatch(setCountValueAC(countMinValue))\r\n    }\r\n    const changeMinValue = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(setButtonDisabledAC(false))\r\n        let eValue = Number(e.currentTarget.value)\r\n        if (eValue >= 0) {\r\n            if (countMaxValue < eValue) {\r\n                return\r\n            } else {\r\n                dispatch(setCountMinValueAC(eValue))\r\n            }\r\n        }\r\n    }, [countMinValue, countMaxValue, buttonDisabled])\r\n    const changeMaxValue = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(setButtonDisabledAC(false))\r\n        let eValue = Number(e.currentTarget.value)\r\n        if (eValue >= countMinValue) {\r\n            dispatch(setCountMaxValueAC(eValue))\r\n        }\r\n        if (eValue < countMinValue) {\r\n            dispatch(setCountMaxValueAC(Number(localStorage.getItem('countMinValue'))))\r\n        }\r\n    }, [countMinValue, countMaxValue, buttonDisabled])\r\n    const incValue = () => {\r\n        dispatch(setCountValueAC(countValue + 1))\r\n\r\n    }\r\n\r\n    const resetValue = useCallback(() => {\r\n        dispatch(setCountValueAC(countMinValue))\r\n    }, [countValue])\r\n    const changePath = (p: string) => {\r\n        dispatch(setCountValueAC(countMinValue))\r\n        dispatch(setPathAC(p))\r\n    }\r\n    const onMouseDown: MouseEventHandler<HTMLLabelElement> = useCallback(() => {\r\n        dispatch(setBlockColorAC('setBlockRed'))\r\n        setTimeout(() => dispatch(setBlockColorAC('setBlock')), 1000)\r\n    }, [blockColor])\r\n\r\n    const blockButtonsIncReset = (t: string) => {\r\n        return (\r\n            <div className={'buttonBlock'}>\r\n                <Button name={'inc'} callback={incValue} disabled={countValue === countMaxValue}/>\r\n                <Button name={'reset'} callback={resetValue} disabled={countValue === countMinValue}/>\r\n                <NavLink to={'set'}>\r\n                    <Button name={'set'} callback={() => changePath(t)} disabled={false}/>\r\n                </NavLink>\r\n\r\n            </div>)\r\n    }\r\n    const blockButtonSet = (t: string) => {\r\n        return (\r\n            <div className={'buttonBlock'}>\r\n                <NavLink to={'counter1'}>\r\n                    <Button name={'set'} callback={() => changePath(t)} disabled={false}/>\r\n                </NavLink>\r\n\r\n            </div>)\r\n    }\r\n\r\n    return (\r\n        <BrowserRouter>\r\n\r\n            <div className=\"App\">\r\n                <header className=\"App-header\">\r\n                    <Routes>\r\n\r\n                        <Route path={PATH.COUNTER1} element={<Counter1 countValue={countValue}\r\n                                                                       countMaxValue={countMaxValue}\r\n                        />}\r\n\r\n                        />\r\n\r\n                        <Route path={PATH.COUNTER2} element={<Counter2 resetValue={resetValue}\r\n                                                                       countValue={countValue}\r\n                                                                       countMaxValue={countMaxValue}\r\n                                                                       incValue={incValue}\r\n                                                                       countMinValue={countMinValue}\r\n                                                                       blockColor={blockColor}\r\n                                                                       onMouseDown={onMouseDown}\r\n                                                                       changeMinValue={changeMinValue}\r\n                                                                       changeMaxValue={changeMaxValue}\r\n                                                                       setCounter2={setCounter2}\r\n                                                                       buttonDisabled={buttonDisabled}\r\n\r\n\r\n                        />}/>\r\n\r\n                        <Route path={PATH.SET} element={<SetComponent countMinValue={countMinValue}\r\n                                                                      countMaxValue={countMaxValue}\r\n                                                                      blockColor={blockColor}\r\n                                                                      onMouseDown={onMouseDown}\r\n                                                                      changeMinValue={changeMinValue}\r\n                                                                      changeMaxValue={changeMaxValue}\r\n                        />}/>\r\n                        <Route path={'TestWorkCounter' } element={<HomePage changePath={changePath}/>}/>\r\n                        <Route path={PATH.HOME} element={<HomePage changePath={changePath}/>}/>\r\n                    </Routes>\r\n                    {path === PATH.COUNTER1 && blockButtonsIncReset(PATH.SET)}\r\n                    {path === PATH.SET && blockButtonSet(PATH.COUNTER1)}\r\n                    <NavLink to={PATH.HOME}>\r\n                        <Button name={'HOME'} callback={() => changePath(PATH.HOME)} disabled={false}/>\r\n                    </NavLink>\r\n                </header>\r\n\r\n            </div>\r\n\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {countReducer} from './reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    count: countReducer,\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./redux/store\";\r\n\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n        <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}